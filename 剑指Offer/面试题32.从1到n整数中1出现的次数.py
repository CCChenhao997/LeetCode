"""
题目描述：
求出1~13的整数中1出现的次数,并算出100~1300的整数中1出现的次数？
1~13中包含1的数字有1、10、11、12、13因此共出现6次。

思路：
如果我们发现了一个规律：
1到10，个位数是1的个数是：1
1到100，十位数是1的个数是：10
1到1000，百位数是1的个数是：100
以此类推
依旧以21345为例。
先统计其中个位商上现1的个数：21340是10的2134倍，也就意味着以10为周期1会不断的在个位上出现2134次，再加上21341到21345中出现的21341这个也是个位出现1，所以总共是2135个个位1。
然后统计十位上出现1的个数：21300是100的213倍，以100为周期，十位每次出现10个1，也就是213*10，再加上从21301到21345，中2131x，这些10个数，总共是213*10+10。
"""

class Solution:
    def NumberOf1Between1AndN_Solution(self, n):
        sum = 0
        count = 10
        while(n*10//count != 0):
            a = n // count
            b = n % count
            if b >= (2*count//10):
                b = count // 10
            elif b >= (count//10):
                b = n%(count//10) + 1
            else:
                b = 0
            sum += a*count//10 + b
            count *= 10
        return sum
    
s = Solution()
print(s.NumberOf1Between1AndN_Solution(20))